# 원의 넓이 = 정사각형 넓이 * 원 내부에 위치한 점의 개수 / 모든 점의 개수                                                                                                                                                             area <- (2*r)^2 * length(x[cond]) / n
area <- ((2*r)^2)*length(y[cond])
# 시각화
par(pty='s') # 창 크기 비율 1:1로
plot(x[cond], y[cond], pch=20, cex=0.1, xlim=c(-r-1,r+1), ylim=c(-r-1,r+1), col='red',
xlab='X-axis', ylab='Y-axis', main='Monte Carlo estimating circle area')
par(new=T)
plot(x[!cond], y[!cond], pch=20, cex=0.1, xlim=c(-r-1,r+1), ylim=c(-r-1,r+1), col='blue',
xlab='X-axis', ylab='Y-axis', main='Monte Carlo estimating circle area')
abline(h=c(-r, r), v=c(-r, r), lty='dotted')
return(area)
}
carculate_area(n, 1)
carculate_area <- function(n, r){
x <- runif(n, -r, r) # x좌표
y <- runif(n, -r, r) # y좌표
# 원의 반경 안에 들면 accept / reject할 condition을 설정해주자!                                                                                                                                                                           cond <- x^2 + y^2 <= r^2
cond <- x^2 + y^2 < r**2
# 원의 넓이 = 정사각형 넓이 * 원 내부에 위치한 점의 개수 / 모든 점의 개수                                                                                                                                                             area <- (2*r)^2 * length(x[cond]) / n
area <- ((2*r)^2)*length(y[cond]) / n
# 시각화
par(pty='s') # 창 크기 비율 1:1로
plot(x[cond], y[cond], pch=20, cex=0.1, xlim=c(-r-1,r+1), ylim=c(-r-1,r+1), col='red',
xlab='X-axis', ylab='Y-axis', main='Monte Carlo estimating circle area')
par(new=T)
plot(x[!cond], y[!cond], pch=20, cex=0.1, xlim=c(-r-1,r+1), ylim=c(-r-1,r+1), col='blue',
xlab='X-axis', ylab='Y-axis', main='Monte Carlo estimating circle area')
abline(h=c(-r, r), v=c(-r, r), lty='dotted')
return(area)
}
carculate_area(n, 1)
metroNormal=function(N,b,init){
x<-rep(init,N)
for (i in 2:N){
# 제안분포 정하고 거기서 Y=y 하나 뽑기                                                                                                                                                                                                    y<-runif(1,x[i-1]-1,x[i-1]+1)
y <- runif(1, x[i-1] - 1, x[i-1] + 1)
# Acceptance Probability 정의해주기!                                                                                                                                                                                                     alpha<-exp((x[i-1]^2 - y^2)/2)
alpha <- min(1,exp((x[i-1]^2 - y^2) / 2))
u<-runif(1) # Unif(0, 1)에서 비교 대상으로 사용할 변수 추출
if (u < alpha) x[i] <- y
else x[i] <- x[i-1]
}
return(x)
}
res1=metroNormal(2*10^3,1,-10)
res1=metroNormal(2*10^3,1,-10)
res1
hist(res1)
hist(res1,nclass=20,main="Simulation of Standard Normal with MCMC (uniform proposal)",prob=T,xlim=c(-4,4))
curve(dnorm(x),-4,4,add=T, col='red')
ts.plot(res1,col=3, main = "Traceplot")
# 정규분포의 특성상 대부분의 데이터가 -2 ~ 2 사이에 위치해 있어야 한다. 그걸 확인하기 위해 빨간 선분 그어주기!
# 인수 : (직선을 그을 x좌표 or y좌표, 0이면 가로선 or 1이면 세로선, lwd=..., col=...)
abline(2,0,lwd=2,col=2);abline(-2,0,lwd=2,col=2)
plot(res1, main = "Traceplot", xlab='Time', type="l") # ts.plot과 같은 역할
if(!require(mnormt)) install.packages("mnormt"); library(mnormt)
Sig=matrix(c(1,0.6,0.6,1),2,2)  # 분산 행렬 정의해주기
x1=seq(-3,3,0.1)                 #############################################
x2=seq(-3,3,0.1)                 # 비교를 위해 실제 다변량 정규분포에서 추출 #
n=length(x1)                     #############################################
z=matrix(0,n,n)
for (i in 1:n){
z[i,]=dmnorm(cbind(x1[i],x2),c(0,0),Sig)
}
contour(x1,x2,z,levels=c(0.005,0.05,0.1,0.15),lwd=2,main="Contour of Bivariate Normal : N(0,0,1,1,0.6)")
Nsim=6
x1=numeric(Nsim)
x2=numeric(Nsim)
for (i in 2:Nsim){
x1[i]=rnorm(1,0.6*           ,sqrt(0.64))
x2[i]=rnorm(1,0.6*           ,sqrt(0.64))
}
for (i in 1:Nsim){
segments(x1[i],x2[i],x1[i+1],x2[i],lwd=2,col="blue")
segments(x1[i+1],x2[i],x1[i+1],x2[i+1],lwd=2,col="blue")
}
Sig=matrix(c(1,0.6,0.6,1),2,2)  # 분산 행렬 정의해주기
x1=seq(-3,3,0.1)                 #############################################
x2=seq(-3,3,0.1)                 # 비교를 위해 실제 다변량 정규분포에서 추출 #
n=length(x1)                     #############################################
z=matrix(0,n,n)
for (i in 1:n){
z[i,]=dmnorm(cbind(x1[i],x2),c(0,0),Sig)
}
contour(x1,x2,z,levels=c(0.005,0.05,0.1,0.15),lwd=2,main="Contour of Bivariate Normal : N(0,0,1,1,0.6)")
dev.off()
contour(x1,x2,z,levels=c(0.005,0.05,0.1,0.15),lwd=2,main="Contour of Bivariate Normal : N(0,0,1,1,0.6)")
Nsim=6
x1=numeric(Nsim)
x2=numeric(Nsim)
Nsim=6
x1=numeric(Nsim)
x2=numeric(Nsim)
for (i in 2:Nsim){
x1[i]=rnorm(1,0.6*x2[i-1],sqrt(0.64))
x2[i]=rnorm(1,0.6*x2[i],sqrt(0.64))
}
for (i in 1:Nsim){
segments(x1[i],x2[i],x1[i+1],x2[i],lwd=2,col="blue")
segments(x1[i+1],x2[i],x1[i+1],x2[i+1],lwd=2,col="blue")
}
text(x1[1],x2[1],"0",cex=2,col="red")
text(x1[2],x2[2],"1",cex=2,col="red")
text(x1[3],x2[3],"2",cex=2,col="red")
text(x1[4],x2[4],"3",cex=2,col="red")
text(x1[5],x2[5],"4",cex=2,col="red")
text(x1[6],x2[6],"5",cex=2,col="red")
Nsim=101
x1=numeric(Nsim)
x2=numeric(Nsim)
for (i in 2:Nsim){
x1[i]=rnorm(1,0.6*x[i-1],sqrt(0.64))
x2[i]=rnorm(1,0.6*x[i],sqrt(0.64))
}
for (i in 1:Nsim){
segments(x1[i],x2[i],x1[i+1],x2[i],lwd=2,col="blue")
segments(x1[i+1],x2[i],x1[i+1],x2[i+1],lwd=2,col="blue")
}
Nsim=10001
x1=numeric(Nsim)
x2=numeric(Nsim)
for (i in 2:Nsim){
x1[i]=rnorm(1,0.6*       x2[i-1]    ,sqrt(0.64))
x2[i]=rnorm(1,0.6*       x1[i]    ,sqrt(0.64))
}
points(x1,x2,pch=20,col="green")
library(MASS)
contour(kde2d(x1, x2, lims= c(-3,3,-3,3)), xlab='x1', ylab='x2',main='Estimated Kernel Density')
Nsim=101
x1=numeric(Nsim)
x2=numeric(Nsim)
for (i in 2:Nsim){
x1[i]=rnorm(1,0.6*x2[i-1],sqrt(0.64))
x2[i]=rnorm(1,0.6*x1[i],sqrt(0.64))
}
for (i in 1:Nsim){
segments(x1[i],x2[i],x1[i+1],x2[i],lwd=2,col="blue")
segments(x1[i+1],x2[i],x1[i+1],x2[i+1],lwd=2,col="blue")
}
Nsim=10001
x1=numeric(Nsim)
for (i in 1:Nsim){
segments(x1[i],x2[i],x1[i+1],x2[i],lwd=2,col="blue")
segments(x1[i+1],x2[i],x1[i+1],x2[i+1],lwd=2,col="blue")
}
for (i in 1:Nsim){
segments(x1[i],x2[i],x1[i+1],x2[i],lwd=2,col="blue")
segments(x1[i+1],x2[i],x1[i+1],x2[i+1],lwd=2,col="blue")
}
Nsim=10001
x1=numeric(Nsim)
x2=numeric(Nsim)
for (i in 2:Nsim){
x1[i]=rnorm(1,0.6*       x2[i-1]    ,sqrt(0.64))
x2[i]=rnorm(1,0.6*       x1[i]    ,sqrt(0.64))
}
points(x1,x2,pch=20,col="green")
library(MASS)
contour(kde2d(x1, x2, lims= c(-3,3,-3,3)), xlab='x1', ylab='x2',main='Estimated Kernel Density')
library(MASS)
points(x1,x2,pch=20,col="green")
rm(list=ls())
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k)
{ index <- sample(1:nrow(data),k)
centroid <- data[index,] #dataframe
combine <- rbind(centroid,data) #dataframe(중심점과 데이터 합친 것)
while(TRUE){
dis <- as.matrix(dist(combine)) #유클리드 거리(개체들끼리 거리 구하기)
dis <- dis[,1:k]
label <- as.factor(apply(dis,1,which.min)) #dis 중 중심점에서 가장 가까운 것
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) #중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
k_means(data, 2)
sample(1:nrow(data,3))
sample(1:nrow(data,3)
)
sample(1:nrow(data),3)
index <- sample(1:nrow(dat), 3)
index <- sample(1:nrow(data), 3)
index
combine <- rbind(centroid, data) ; combine
centroid <- data[index,]
centroid <- data[index,] ; centroid
combine <- rbind(centroid, data) ; combine
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
index <- sample(1:nrow(data), 3)
centroid <- data[index,] ; centroid
combine <- rbind(centroid, data) ; combine
dis <- as.matrix(dist(combine)) ; dis
dim(dis)
dis <- dis[, 1:k] ; dis
dis <- dis[, 1:3] ; dis
label <- as.factor(apply(dis, 1, which.min))
label
which.min(data$Sepal.Length)
apply(dis,1,which.min)
vv <- apply(dis,1,which.min)
str(vv)
vv
combine <- cbind(combine, label)
combibe
combine
dis
combine[1:(ncol(combine) - 1)]
combine[1:(ncol(combine) - 1),]
combine[1:(ncol(combine) - 1)]
combine[1:(ncol(combine) - 1),1]
combine[1:(ncol(combine) - 1),]
center1 <- aggregate(combine[1:(ncol(combine) - 1), by = list(combine$label), mean)]
center1 <- aggregate(combine[1:(ncol(combine) - 1), by = list(combine$label), mean])
center1 <- aggregate(combine[1:(ncol(combine) - 1)], by = list(combine$label), mean)
center1
center2 <- as.integer(as.character(center1[, 1]))
center2
str(center1)
centroid
center1
center
centroid
centroid[center2,]
center1
centroid[center2,] <- as.matrix(center1[, 2:ncol(center1)])
centroid
center2
centroid <- data[index,] ; centroid
centroid[center2,] <- as.matrix(center1[, 2:ncol(center1)]) ; centroid
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)]
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] ; equal
equal <- which(equal==F)
equal <- which(equal==F) ; equal
center1 <- aggregate(combine[1:(ncol(combine) - 1)], by = list(combine$label), mean)
center2 <- as.integer(as.character(center1[, 1]))
centroid[center2,] <- as.matrix(center1[, 2:ncol(center1)]) ; centroid
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] ; equal
equal <- which(equal==F) ; equal
combine
centroid
combine[1:nrow(centroid), 1:ncol(centroid)]
k_means(data,5)
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
combine[1:k,ncol(combine)]
index <- sample(1:nrow(data), 3)
centroid <- data[index,] ; centroid
combine <- rbind(centroid, data) ; combine
dis <- as.matrix(dist(combine)) ; dis
dis <- dis[, 1:3] ; dis # 중심점과의 거리
label <- as.factor(apply(dis, 1, which.min))
combine <- cbind(combine, label)
center1 <- aggregate(combine[1:(ncol(combine) - 1)], by = list(combine$label), mean)
center2 <- as.integer(as.character(center1[, 1]))
centroid[center2,] <- as.matrix(center1[, 2:ncol(center1)]) ; centroid
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] ; equal
equal <- which(equal==F) ; equal
combine
combine[1:k,ncol(combine)]
combine[1:3,ncol(combine)]
combine[1:3,ncol(combine)][1]
combine[1:3,ncol(combine)][1][2]
combine[1:3,ncol(combine)][2]
combine[1:3,ncol(combine)][3]
combine$label
combine$label[1]
combine$label[2]
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
for (i in (1:k)(
combine$label[i] <- paste0("point",i)
)
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
for (i in (1:k))(
combine$label[i] <- paste0("point",i)
)
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
paste0("point",1)
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
#combine[1:k,ncol(combine)] <- "point"
for (i in (1:k))(
combine$label[i] <- paste0("point",i)
)
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
paste0("point",1)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
#levels(combine[,ncol(combine)]) <- c(1:k,"point")
#combine[1:k,ncol(combine)] <- "point"
for (i in (1:k))(
levels(combine[,ncol(combine)]) <- c(paste0("point",i), 1:k)
combine$label[i] <- paste0("point",i)
)
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
combine$label
for (i in (1:k))(
combine$label[i] <- c(paste0("point",i))
)
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
rm(list=ls())
data <- iris[,1:4] # 라벨 제거한 iris 데이터
str(data)
k_means<-function(data,k){
index <- sample(1:nrow(data),k)
centroid <- data[index,] # First Centroid
combine <- rbind(centroid,data)
while(TRUE){
dis <- as.matrix(dist(combine)) # Distance
dis <- dis[,1:k] # Distance with centroid
label <- as.factor(apply(dis,1,which.min)) # Centroid ~ Data, which has minimum
combine <- cbind(combine,label)
center1 <- aggregate(combine[1:(ncol(combine)-1)],by=list(combine$label),mean) # 중심점 다시 구하기
center2 <- as.integer(as.character(center1[,1]))
centroid[center2,] <- as.matrix(center1[,2:ncol(center1)])
equal <- centroid == combine[1:nrow(centroid),1:ncol(centroid)] #중심점 비교
equal <- which(equal==F)
if(TRUE){                                 #중심점이 같다면
levels(combine[,ncol(combine)]) <- c(1:k,"point")
combine[1:k,ncol(combine)] <- "point"
combine$label
return(combine)
}
combine <- combine[,(ncol(combine)-1)] #중심점이 다르면
combine[1:k,] <- centroid
}
}
k_means(data,5)
